{"name":"sublish","tagline":"minimalist publish/subscribe","body":"# Synopsis\r\n\r\n**sublish** is a minimalist lightweight (504 Bytes minified and 297 Bytes gzipped) implementation of publish/subscribe.\r\n\r\n[![browser support](https://ci.testling.com/pluma/sublish.png)](https://ci.testling.com/pluma/sublish)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/sublish.png?branch=master)](https://travis-ci.org/pluma/sublish) [![NPM version](https://badge.fury.io/js/sublish.png)](http://badge.fury.io/js/sublish)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install sublish\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/sublish.git\r\ncd sublish\r\nnpm install\r\nmake && make dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/sublish\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install sublish\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/sublish/master/dist/sublish.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/sublish/master/dist/sublish.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/sublish/master/dist/sublish.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/sublish.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `sublish` module available in the global namespace.\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar myPubSub = new sublish.PubSub();\r\n\r\nmyPubSub.subscribe(function(message) {\r\n  console.log('myPubSub says: \"' + message + '\"');\r\n});\r\n\r\n// elsewhere\r\nmyPubSub.publish('something amazing');\r\n// -> 'myPubSub says: \"something amazing\"'\r\n```\r\n\r\n# Mixin usage example with [mixed](https://github.com/pluma/mixed)\r\n\r\n```javascript\r\nfunction Person(name) {\r\n    this.name = name;\r\n}\r\nPerson.prototype = {\r\n    say: function(message) {\r\n        this.publish(this.name + ' says: \"' + message + '\"');\r\n    }\r\n};\r\n\r\nvar joe = new Person('Joe');\r\nmixed.mixin(sublish.PubSub, joe);\r\n\r\njoe.subscribe(function(message) {\r\n    console.log(message);\r\n});\r\n\r\n// elsewhere\r\njoe.say('Hello there!');\r\n// -> 'Joe says: \"Hello there!\"\r\n```\r\n\r\n# API\r\n\r\n## new PubSub()\r\n\r\nCreates a new PubSub instance.\r\n\r\n**NOTE:** This is a constructor. Use of the `new` keyword is therefore not optional.\r\n\r\n## PubSub#subscribe(callback:Function)\r\n\r\nAdds the given callback function to this object's list of subscribers.\r\n\r\n**NOTE**: The callback will be called with the PubSub instance as its context. If you want to preserve the callback's original context, use `Function#bind` or (in legacy browsers) wrap the callback in a closure.\r\n\r\n## PubSub#unsubscribe(callback:Function)\r\n\r\nRemoves the given callback function from this object's list of subscribers.\r\n\r\n## PubSub#publish(argsâ€¦)\r\n\r\nPublishes the given arguments as a message. Every callback function in this object's list of subscribers will be called sequentially with the given messages as its arguments.\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/sublish/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}